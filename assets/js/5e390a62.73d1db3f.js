"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[444],{2958:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"developers/backend","title":"Server","description":"Overview","source":"@site/docs/developers/backend.md","sourceDirName":"developers","slug":"/developers/backend","permalink":"/owlistic/docs/developers/backend","draft":false,"unlisted":false,"editUrl":"https://github.com/owlistic-notes/owlistic/tree/main/docs/website/docs/developers/backend.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Architecture","permalink":"/owlistic/docs/developers/architecture"},"next":{"title":"App","permalink":"/owlistic/docs/developers/frontend"}}');var t=i(4848),r=i(8453);const o={sidebar_position:2},l="Server",c={},d=[{value:"Overview",id:"overview",level:2},{value:"High Level Design",id:"high-level-design",level:2},{value:"API Routes",id:"api-routes",level:3},{value:"Events Streaming",id:"events-streaming",level:3},{value:"Components",id:"components",level:2},{value:"Core Services",id:"core-services",level:3},{value:"User Service",id:"user-service",level:4},{value:"Notebook Service",id:"notebook-service",level:4},{value:"Note Service",id:"note-service",level:4},{value:"Block Service",id:"block-service",level:4},{value:"Task Service",id:"task-service",level:4},{value:"Event Streaming Services",id:"event-streaming-services",level:3},{value:"Event Handler Service",id:"event-handler-service",level:4},{value:"WebSocket Service",id:"websocket-service",level:4},{value:"Sync Service",id:"sync-service",level:4},{value:"Event Streaming Components",id:"event-streaming-components",level:3},{value:"Nats",id:"nats",level:4},{value:"Producer",id:"producer",level:4},{value:"Consumer",id:"consumer",level:4},{value:"Data Models",id:"data-models",level:3},{value:"User Model",id:"user-model",level:4},{value:"Notebook",id:"notebook",level:4},{value:"Note",id:"note",level:4},{value:"Block",id:"block",level:4},{value:"Task",id:"task",level:4},{value:"Event",id:"event",level:4}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"server",children:"Server"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)("img",{src:"https://cdn.simpleicons.org/go",height:"40",alt:"go logo"}),"\n",(0,t.jsx)("img",{width:"12"}),"\n",(0,t.jsx)("img",{src:"https://cdn.simpleicons.org/postgresql",height:"40",alt:"postgresql logo"}),"\n",(0,t.jsx)("img",{width:"12"}),"\n",(0,t.jsx)("img",{src:"https://cdn.simpleicons.org/natsdotio",height:"40",alt:"nats logo"}),"\n",(0,t.jsx)("img",{width:"12"}),"\n",(0,t.jsx)(n.p,{children:"Owlistic server is built using Go, a statically typed, compiled language. The main reason for choosing Go is its strong support for concurrency and efficient memory management, which are crucial for event-driven systems. It also uses the PostgreSQL database for data persistence and NATS as an event streaming system to push real-time updates to clients."}),"\n",(0,t.jsx)(n.h2,{id:"high-level-design",children:"High Level Design"}),"\n",(0,t.jsx)(n.p,{children:"Owlistic server is implemented following traditional client-server architecture exposing a set of REST APIs for Create, Update, Delete, Read (CRUD) operations. The server exposes a gateway layer for REST APIs responsible for routing requests to the appropriate service."}),"\n",(0,t.jsx)(n.p,{children:"On top of that, Owlistic leverages event-driven architecture to push updates to an event broker system allowing fast and real-time synchronization. The server exposes a gateway layer for WebSocket connections responsible for pushing events from the downstream broker system to clients."}),"\n",(0,t.jsx)(n.p,{children:"Following page provides a detailed overview of the server's components and their interactions."}),"\n",(0,t.jsx)(n.h3,{id:"api-routes",children:"API Routes"}),"\n",(0,t.jsxs)(n.p,{children:["Owlistic server follows Clean Architecture design pattern to expose endpoints for various CRUD operations. The API routing mechanism is based on the ",(0,t.jsx)(n.a,{href:"https://gin-gonic.com/",children:"Gin"})," web framework, which provides a simple and intuitive way to define routes. Each route is defined using a combination of HTTP methods (GET, POST, PUT, DELETE) and URL paths and leverages ",(0,t.jsx)(n.a,{href:"#core-services",children:"core services"})," (controllers) to handle requests and responses and ",(0,t.jsx)(n.a,{href:"#data-models",children:"data models"})," (repositories) to handle database interactions."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Clean Architecture",src:i(6640).A+"",width:"2187",height:"607"})}),"\n",(0,t.jsx)(n.h3,{id:"events-streaming",children:"Events Streaming"}),"\n",(0,t.jsx)(n.p,{children:"Owlistic server uses an Event Driven Architecture (EDA) allowing for real-time updates and communication between services. To enable real-time updates to clients, the server uses outbox design pattern to publish events to clients. This allows for efficient communication between services without the need for polling or long-lived connections."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Outbox Design Pattern",src:i(7127).A+"",width:"1889",height:"923"})}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(n.h3,{id:"core-services",children:"Core Services"}),"\n",(0,t.jsx)(n.h4,{id:"user-service",children:"User Service"}),"\n",(0,t.jsx)(n.p,{children:"The User Service is responsible for managing user authentication and authorization. Its main responsibilities include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Handling user registration and login requests"}),"\n",(0,t.jsx)(n.li,{children:"Authenticating users and verifying their credentials"}),"\n",(0,t.jsx)(n.li,{children:"Authorizing users to access specific features and resources based on their roles and permissions"}),"\n",(0,t.jsx)(n.li,{children:"Managing user profiles and settings"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"notebook-service",children:"Notebook Service"}),"\n",(0,t.jsxs)(n.p,{children:["The Notebook Service is responsible for managing ",(0,t.jsx)(n.a,{href:"#notebook",children:"notebook entities"}),". Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creating, reading, updating, and deleting notebooks"}),"\n",(0,t.jsx)(n.li,{children:"Emitting events on notebook CRUD operations"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Events emitted by notebook service are persisted as ",(0,t.jsx)(n.a,{href:"#event",children:"event entities"})," in a database table. At predefined time intervals the ",(0,t.jsx)(n.a,{href:"#event-handler-service",children:"event handler service"})," will process events not yet dispatched to forward them to the broker system."]})}),"\n",(0,t.jsx)(n.h4,{id:"note-service",children:"Note Service"}),"\n",(0,t.jsxs)(n.p,{children:["The Note Service is responsible for managing ",(0,t.jsx)(n.a,{href:"#note",children:"note entities"}),". Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creating, reading, updating, and deleting (CRUD) notes"}),"\n",(0,t.jsx)(n.li,{children:"Emitting events on note CRUD operations"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Events emitted by note service are persisted as ",(0,t.jsx)(n.a,{href:"#event",children:"event entities"})," in a database table. At predefined time intervals the ",(0,t.jsx)(n.a,{href:"#event-handler-service",children:"event handler service"})," will process events not yet dispatched to forward them to the broker system."]})}),"\n",(0,t.jsx)(n.h4,{id:"block-service",children:"Block Service"}),"\n",(0,t.jsxs)(n.p,{children:["Block Service is responsible for managing ",(0,t.jsx)(n.a,{href:"#block",children:"block entities"}),". Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creating, reading, updating, and deleting (CRUD) block entities"}),"\n",(0,t.jsx)(n.li,{children:"Emitting events on block CRUD operations"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Events emitted by block service are persisted as ",(0,t.jsx)(n.a,{href:"#event",children:"event entities"})," in a database table. At predefined time intervals the ",(0,t.jsx)(n.a,{href:"#event-handler-service",children:"event handler service"})," will process events not yet dispatched to forward them to the broker system."]})}),"\n",(0,t.jsx)(n.h4,{id:"task-service",children:"Task Service"}),"\n",(0,t.jsxs)(n.p,{children:["The Task Service is responsible for managing ",(0,t.jsx)(n.a,{href:"#task",children:"task entities"}),". Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creating, reading, updating, and deleting tasks"}),"\n",(0,t.jsx)(n.li,{children:"Emitting events on task CRUD operations"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Events emitted by task service are persisted as ",(0,t.jsx)(n.a,{href:"#event",children:"event entities"})," in a database table. At predefined time intervals the ",(0,t.jsx)(n.a,{href:"#event-handler-service",children:"event handler service"})," will process events not yet dispatched to forward them to the broker system."]})}),"\n",(0,t.jsx)(n.h3,{id:"event-streaming-services",children:"Event Streaming Services"}),"\n",(0,t.jsx)(n.h4,{id:"event-handler-service",children:"Event Handler Service"}),"\n",(0,t.jsxs)(n.p,{children:["The Event Handler Service is responsible for handling events generated by the system. It acts as a ",(0,t.jsx)(n.a,{href:"#prodicer",children:"producer"})," of un-dispatched ",(0,t.jsx)(n.a,{href:"#event",children:"event entites"})," and forward them to the broker system. Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Processing events created on entitites CRUD operations"}),"\n",(0,t.jsx)(n.li,{children:"Dispatching events to event broker system for further processing"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"websocket-service",children:"WebSocket Service"}),"\n",(0,t.jsxs)(n.p,{children:["The WebSocket Service is responsible for handling WebSocket connections with clients. It acts as a ",(0,t.jsx)(n.a,{href:"#consumer",children:"consumer"})," of dispatched ",(0,t.jsx)(n.a,{href:"#event",children:"event entites"})," and forward them to clients. Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Consuming events from all topics"}),"\n",(0,t.jsx)(n.li,{children:"Establishing and maintaining WebSocket connections"}),"\n",(0,t.jsx)(n.li,{children:"Handling incoming messages from clients"}),"\n",(0,t.jsx)(n.li,{children:"Broadcasting messages to connected clients"}),"\n",(0,t.jsx)(n.li,{children:"Managing connection states and closing connections as needed"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"sync-service",children:"Sync Service"}),"\n",(0,t.jsxs)(n.p,{children:["The Sync Service is responsible for synchronizing data task and block entities. It acts as a ",(0,t.jsx)(n.a,{href:"#consumer",children:"consumer"})," of dispatched bloc/task ",(0,t.jsx)(n.a,{href:"#event",children:"event entites"})," and process them accordingly. Its main responsibilities include:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Consuming events from block and task topics"}),"\n",(0,t.jsx)(n.li,{children:"Sync task entity on associated block entity changes"}),"\n",(0,t.jsx)(n.li,{children:"Sync block entity on associated task entity changes"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"event-streaming-components",children:"Event Streaming Components"}),"\n",(0,t.jsx)(n.h4,{id:"nats",children:"Nats"}),"\n",(0,t.jsxs)(n.p,{children:["The event streaming system is based on the ",(0,t.jsx)(n.a,{href:"https://nats.io/",children:"NATS"})," messaging system, which allows for efficient and scalable communication between services. Nats is a popular open-source messaging system that enables real-time communication between services. Owlistic server leverages NATS as an event streaming system, allowing for efficient and scalable communication between services."]}),"\n",(0,t.jsx)(n.h4,{id:"producer",children:"Producer"}),"\n",(0,t.jsxs)(n.p,{children:["The producer is responsible for publishing events to the event streaming system. It is implemented in ",(0,t.jsx)(n.code,{children:"producer.go"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Responsible for publishing events to the NATS broker."}),"\n",(0,t.jsxs)(n.li,{children:["Uses Go's built-in ",(0,t.jsx)(n.code,{children:"nats"})," library for interacting with NATS."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"consumer",children:"Consumer"}),"\n",(0,t.jsxs)(n.p,{children:["The consumer is responsible for consuming events from the event streaming system. It is implemented in ",(0,t.jsx)(n.code,{children:"consumer.go"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"broker/consumer.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Responsible for subscribing to events published by the producer and handling them accordingly."}),"\n",(0,t.jsxs)(n.li,{children:["Uses Go's built-in ",(0,t.jsx)(n.code,{children:"nats"})," library for interacting with NATS broker."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"data-models",children:"Data Models"}),"\n",(0,t.jsx)(n.h4,{id:"user-model",children:"User Model"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"models/user.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Description: A user is a entity that can create and interact with notebooks, notes, and tasks."}),"\n",(0,t.jsxs)(n.li,{children:["Properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ID: Unique identifier"}),"\n",(0,t.jsx)(n.li,{children:"Email: Email address of the user"}),"\n",(0,t.jsx)(n.li,{children:"PasswordHash: Hashed password of the user"}),"\n",(0,t.jsx)(n.li,{children:"Username: Username chosen by the user"}),"\n",(0,t.jsx)(n.li,{children:"DisplayName: Display name chosen by the user"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"notebook",children:"Notebook"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"models/notebook.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Description: A notebook is a container for notes."}),"\n",(0,t.jsxs)(n.li,{children:["Properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ID: Unique identifier"}),"\n",(0,t.jsx)(n.li,{children:"UserID: Foreign key referencing the user who created it"}),"\n",(0,t.jsx)(n.li,{children:"Name: Title of the notebook"}),"\n",(0,t.jsx)(n.li,{children:"Description: Brief description of the notebook"}),"\n",(0,t.jsx)(n.li,{children:"Notes: List of notes associated with this notebook"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"note",children:"Note"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"models/note.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Description: A note is a container for blocks and tags."}),"\n",(0,t.jsxs)(n.li,{children:["Properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ID: Unique identifier"}),"\n",(0,t.jsx)(n.li,{children:"UserID: Foreign key referencing the user who created it"}),"\n",(0,t.jsx)(n.li,{children:"NotebookID: Foreign key referencing the notebook that contains it"}),"\n",(0,t.jsx)(n.li,{children:"Title: Title of the note"}),"\n",(0,t.jsx)(n.li,{children:"Blocks: List of blocks associated with this note"}),"\n",(0,t.jsx)(n.li,{children:"Tags: List of tags associated with this note"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"block",children:"Block"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"models/block.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Description: A block is a type of content that can be added to notes."}),"\n",(0,t.jsxs)(n.li,{children:["Properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ID: Unique identifier"}),"\n",(0,t.jsx)(n.li,{children:"UserID: Foreign key referencing the user who created it"}),"\n",(0,t.jsx)(n.li,{children:"NoteID: Foreign key referencing the note that contains it"}),"\n",(0,t.jsx)(n.li,{children:"Type: Type of block (e.g., text, image)"}),"\n",(0,t.jsx)(n.li,{children:"Content: The actual content of the block"}),"\n",(0,t.jsx)(n.li,{children:"Metadata: Custom metadata set by the user"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"task",children:"Task"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"models/task.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Description: A task is a type of block."}),"\n",(0,t.jsxs)(n.li,{children:["Properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ID: Unique identifier"}),"\n",(0,t.jsx)(n.li,{children:"UserID: Foreign key referencing the user who created it"}),"\n",(0,t.jsx)(n.li,{children:"NoteID: Foreign key referencing the note that contains it"}),"\n",(0,t.jsx)(n.li,{children:"Title: Title of the task"}),"\n",(0,t.jsx)(n.li,{children:"Description: Brief description of the task"}),"\n",(0,t.jsx)(n.li,{children:"IsCompleted: Flag indicating whether the task is completed"}),"\n",(0,t.jsx)(n.li,{children:"DueDate: Due date of the task"}),"\n",(0,t.jsx)(n.li,{children:"Metadata: Custom metadata set by the user"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"event",children:"Event"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Represented in code: ",(0,t.jsx)(n.code,{children:"models/event.go"})]}),"\n",(0,t.jsx)(n.li,{children:"Description: An event represents an action or occurrence that occurs within the system."}),"\n",(0,t.jsxs)(n.li,{children:["Properties:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ID: Unique identifier for the event"}),"\n",(0,t.jsx)(n.li,{children:'Event: Name of the event (e.g., "note_created", "task_completed")'}),"\n",(0,t.jsx)(n.li,{children:"Entity: The entity associated with the event, such as a note or task"}),"\n",(0,t.jsx)(n.li,{children:"Timestamp: When the event occurred"}),"\n",(0,t.jsx)(n.li,{children:"Data: Additional data related to the event"}),"\n",(0,t.jsx)(n.li,{children:"Status: Current status of the event"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},6640:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/clean_architecture-facf61ea8692d0b86d4cb53a564b15b6.png"},7127:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/event_outbox-52d5309ae4a6968388edba9da4d97443.png"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);