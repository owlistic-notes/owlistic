name: artifacts-release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  server-binary:
    name: Server binary Package and Archive
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      # Build Golang binary
      - name: Build Golang Binary
        run: |
          cd src/backend
          go build -o owlistic ./cmd/main.go
          
      # Archive Go binary as artifact
      - name: Archive Go Binary
        uses: actions/upload-artifact@v4
        with:
          name: Server Binary
          path: src/backend/owlistic
          retention-days: 7
          if-no-files-found: error

  retag-server-images:
    name: Retag Server Docker Images (${{ matrix.platform }})
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        platform: [arm64, amd64]
        include:
          - platform: arm64
            suffix: "-arm64"
            is_default: false
          - platform: amd64
            suffix: ""
            is_default: true
    steps:
      # Checkout code to get the commit SHA
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      # Get the commit SHA
      - name: Get commit SHA
        id: get-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Log in to Github Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Get the version tag without the 'v' prefix
      - name: Extract version tag
        id: get-tag
        run: echo "tag=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      # Retag and push server image based on platform
      - name: Retag and push ${{ matrix.platform }} server image
        run: |
          SOURCE_IMAGE="ghcr.io/${{ github.repository }}:${{ steps.get-sha.outputs.sha }}${{ matrix.suffix }}"
          VERSION_TAG="ghcr.io/${{ github.repository }}:${{ steps.get-tag.outputs.tag }}${{ matrix.suffix }}"
          
          echo "Pulling source image: ${SOURCE_IMAGE}"
          docker pull --platform ${{ matrix.platform }} ${SOURCE_IMAGE}
          
          echo "Tagging with version: ${VERSION_TAG}"
          docker tag ${SOURCE_IMAGE} ${VERSION_TAG}
          
          # Push version tag
          echo "Pushing version tag"
          docker push ${VERSION_TAG}
          
          # Tag as latest only for the default platform
          if [[ "${{ matrix.is_default }}" == "true" ]]; then
            LATEST_TAG="ghcr.io/${{ github.repository }}:latest"
            echo "Tagging as latest: ${LATEST_TAG}"
            docker tag ${SOURCE_IMAGE} ${LATEST_TAG}
            echo "Pushing latest tag"
            docker push ${LATEST_TAG}
          fi

  retag-frontend-images:
    name: Retag Frontend Docker Images (${{ matrix.platform }})
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        platform: [arm64, amd64]
        include:
          - platform: arm64
            suffix: "-arm64"
            is_default: false
          - platform: amd64
            suffix: ""
            is_default: true
    steps:
      # Checkout code to get the commit SHA
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      # Get the commit SHA
      - name: Get commit SHA
        id: get-sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Log in to Github Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      # Get the version tag without the 'v' prefix
      - name: Extract version tag
        id: get-tag
        run: echo "tag=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      # Retag and push frontend image based on platform
      - name: Retag and push ${{ matrix.platform }} frontend image
        run: |
          SOURCE_IMAGE="ghcr.io/${{ github.repository }}-app:${{ steps.get-sha.outputs.sha }}${{ matrix.suffix }}"
          VERSION_TAG="ghcr.io/${{ github.repository }}-app:${{ steps.get-tag.outputs.tag }}${{ matrix.suffix }}"
          
          echo "Pulling source image: ${SOURCE_IMAGE}"
          docker pull --platform ${{ matrix.platform }} ${SOURCE_IMAGE}
          
          echo "Tagging with version: ${VERSION_TAG}"
          docker tag ${SOURCE_IMAGE} ${VERSION_TAG}
          
          # Push version tag
          echo "Pushing version tag"
          docker push ${VERSION_TAG}
          
          # Tag as latest only for the default platform (ARM64)
          if [[ "${{ matrix.is_default }}" == "true" ]]; then
            LATEST_TAG="ghcr.io/${{ github.repository }}-app:latest"
            echo "Tagging as latest: ${LATEST_TAG}"
            docker tag ${SOURCE_IMAGE} ${LATEST_TAG}
            echo "Pushing latest tag"
            docker push ${LATEST_TAG}
          fi
          
  frontend-package:
    name: Frontend Package and Archive
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # Setup Flutter environment
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      # Install Dependencies
      - name: Install Flutter Dependencies
        run: |
          cd src/frontend
          flutter pub get

      # Build Flutter Apps for Multiple Platforms
      - name: Build Client Apps
        run: |
          cd src/frontend

          # Configure Flutter for web
          flutter config --enable-web
          # --enable-android --enable-ios --enable-macos-desktop  --enable-linux-desktop --enable-linux-desktop

          # Get Flutter packages
          flutter pub get

          # Initialize web project (creates index.html if missing)
          flutter create --platforms=web . #,android,ios,macos,linux
          
          # Build web app
          flutter build web --release

          # Build Android app
          # flutter build apk --release

          # Build iOS app
          # flutter build ios --release

          # Build macOS app
          # flutter build macos --release

          # Build macOS app
          # flutter build linux --release
          
      # Archive Flutter web build as artifact
      - name: Archive Web App
        uses: actions/upload-artifact@v4
        with:
          name: Web App
          path: src/frontend/build/web
          retention-days: 7
          if-no-files-found: error
